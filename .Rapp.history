library(Rcpp)#
	sourceCpp("Weibull.cpp")#
	#sourceCpp("EM.cpp")#
#
	A<-read.table("inputdata_Wuhan.txt")#
	#output1 <- EM(A)#
	output <- Weibull(A)#
#
	#B1 <- output1$MLE#
	#C1 <- output1$SMLE#
	#D1 <- output1$dens#
	B2 <- output$df#
	C2 <- output$dens#
#
	#x<-B1[,1]#
	#y<-B1[,2]#
	#x1<-C1[,1]	#
	#y1<-C1[,2]#
	t<-B2[,1]#
	u<-B2[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(0,14),ylim=c(0,1), main= "",ylab="",xlab="",bty="n",las=1)#
#
	#lines(x,y,lwd=2,col="red",type='s')#
	#lines(x1,y1,lwd=2,col="blue",type='s')#
	lines(t,u,lwd=2, lty=1,col="red")#
	#lines(t1,u1,lwd=2, lty=1,col="blue")
output1
output2$parameters
library(Rcpp)#
	sourceCpp("Weibull.cpp")#
	sourceCpp("NPMLE.cpp")#
#
	A<-read.table("inputdata_Wuhan.txt")#
	output1 <- NPMLE(A)#
	output2 <- Weibull(A)#
#
	B1 <- output1$MLE#
	C1 <- output1$SMLE#
	D1 <- output1$dens#
	B2 <- output2$df#
	C2 <- output2$dens#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-C1[,1]	#
	y1<-C1[,2]#
	t<-D1[,1]#
	u<-D1[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(0,14),ylim=c(0,max(u,u1)), main= "",ylab="",xlab="",bty="n",las=1)#
#
	#lines(x,y,lwd=2,col="red",type='s')#
	#lines(x1,y1,lwd=2,col="blue",type='s')#
	lines(t,u,lwd=2, lty=1,col="blue")#
	lines(t1,u1,lwd=2, lty=2,col="red")
library(Rcpp)#
	sourceCpp("Weibull.cpp")#
	sourceCpp("NPMLE.cpp")#
#
	A<-read.table("inputdata_Wuhan.txt")#
	output1 <- NPMLE(A)#
	output2 <- Weibull(A)#
#
	B1 <- output1$MLE#
	C1 <- output1$SMLE#
	D1 <- output1$dens#
	B2 <- output2$df#
	C2 <- output2$dens#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-C1[,1]	#
	y1<-C1[,2]#
	t<-D1[,1]#
	u<-D1[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(0,14),ylim=c(0,max(y,y1)), main= "",ylab="",xlab="",bty="n",las=1)#
#
	lines(x,y,lwd=2,col="red",type='s')#
	lines(x1,y1,lwd=2,col="blue",type='s')#
	#lines(t,u,lwd=2, lty=1,col="blue")#
	#lines(t1,u1,lwd=2, lty=2,col="red")
library(Rcpp)#
	sourceCpp("Weibull.cpp")#
	sourceCpp("NPMLE.cpp")#
#
	A<-read.table("inputdata_Wuhan.txt")#
	output1 <- NPMLE(A)#
	output2 <- Weibull(A)#
#
	B1 <- output1$MLE#
	C1 <- output1$SMLE#
	D1 <- output1$dens#
	B2 <- output2$df#
	C2 <- output2$dens#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-C1[,1]	#
	y1<-C1[,2]#
	t<-D1[,1]#
	u<-D1[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(0,14),ylim=c(0,max(y,y1)), main= "",ylab="",xlab="",bty="n",las=1)#
#
	lines(x,y,lwd=2,col="red",type='s')#
	lines(x1,y1,lwd=2,col="blue")#
	#lines(t,u,lwd=2, lty=1,col="blue")#
	#lines(t1,u1,lwd=2, lty=2,col="red")
library(lbfgs)#
   A<-read.table("inputdata_Wuhan.txt")#
   data1<-A[,1]#
   data2<-A[,2]#
   n<-88#
   alpha=vector("numeric",2)#
criterion=function(alpha)#
{#
	calc=0;#
	for (i in 1:n)#
	{#
		calc = calc+log(exp(-alpha[2]*data1[i]^alpha[1])-exp(-alpha[2]*data2[i]^alpha[1]));#
	}#
	return(-calc);#
}#
#
grad=function(alpha)#
{#
	calc1=0;#
	calc2=0;#
	for (i in 1:n)#
	{#
		denom = exp(-alpha[2]*data1[i]^alpha[1])-exp(-alpha[2]*data2[i]^alpha[1]);#
		if (data1[i]==0)#
		{#
			calc1 = calc1+alpha[2]*exp(-alpha[2]*data2[i]^alpha[1])*(data2[i]^alpha[1])*log(data2[i])/denom;#
		}#
		else#
		{#
			calc1 = calc1+alpha[2]*exp(-alpha[2]*data2[i]^alpha[1])*(data2[i]^alpha[1])*log(data2[i])/denom-alpha[2]*exp(-alpha[2]*data1[i]^alpha[1])*(data1[i]^alpha[1])*log(data1[i])/denom;#
		}#
		calc2 = calc2+exp(-alpha[2]*data2[i]^alpha[1])*(data2[i]^alpha[1])/denom-exp(-alpha[2]*data1[i]^alpha[1])*(data1[i]^alpha[1])/denom;#
	}#
	return(c(-calc1,-calc2));#
}#
#
output <- lbfgs(criterion, grad, c(2,0.002))#
output$par
C1
D1
B1
library(Rcpp)#
	sourceCpp("Weibull.cpp")#
	sourceCpp("NPMLE_ICM.cpp")#
#
	A<-read.table("inputdata_Wuhan.txt")#
	output1 <- NPMLE(A)#
	output2 <- Weibull(A)#
#
	B1 <- output1$MLE#
	C1 <- output1$SMLE#
	D1 <- output1$dens#
	B2 <- output2$df#
	C2 <- output2$dens#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-B2[,1]	#
	y1<-B2[,2]#
	t<-D1[,1]#
	u<-D1[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(0,14),ylim=c(0,max(u,u1)), main= "",ylab="",xlab="",bty="n",las=1)#
	lines(t,u,lwd=2, lty=1,col="blue")#
	lines(t1,u1,lwd=2, lty=2,col="red")
library(Rcpp)#
	sourceCpp("Weibull.cpp")#
	sourceCpp("NPMLE_ICM.cpp")#
#
	A<-read.table("inputdata_Wuhan.txt")#
	output1 <- NPMLE(A)#
	output2 <- Weibull(A)#
#
	B1 <- output1$MLE#
	C1 <- output1$SMLE#
	D1 <- output1$dens#
	B2 <- output2$df#
	C2 <- output2$dens#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-B2[,1]	#
	y1<-B2[,2]#
	t<-D1[,1]#
	u<-D1[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(0,14),ylim=c(0,max(u,u1)), main= "",ylab="",xlab="",bty="n",las=1)#
#
	lines(x,y,lwd=2,col="red",type='s')#
	lines(x1,y1,lwd=2,col="blue")#
	lines(t,u,lwd=2, lty=1,col="blue")#
	lines(t1,u1,lwd=2, lty=2,col="red")
lines(t,u,lwd=2, lty=1,col="blue")#
	lines(t1,u1,lwd=2, lty=2,col="red")
output1$bandwidth
plot(c(-1000,-1000),xlim=c(0,14),ylim=c(0,max(u,u1)), main= "",ylab="",xlab="",bty="n",las=1)#
#
	#lines(x,y,lwd=2,col="red",type='s')#
	#lines(x1,y1,lwd=2,col="blue")#
	lines(t,u,lwd=2, lty=1,col="blue")#
	lines(t1,u1,lwd=2, lty=2,col="red")
library(Rcpp)#
	sourceCpp("Weibull.cpp")#
	sourceCpp("NPMLE_EM.cpp")#
#
	A<-read.table("inputdata_Wuhan.txt")#
	output1 <- NPMLE(A)#
	output2 <- Weibull(A)#
#
	B1 <- output1$MLE#
	C1 <- output1$SMLE#
	D1 <- output1$dens#
	B2 <- output2$df#
	C2 <- output2$dens#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-B2[,1]	#
	y1<-B2[,2]#
	t<-D1[,1]#
	u<-D1[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(0,14),ylim=c(0,max(u,u1)), main= "",ylab="",xlab="",bty="n",las=1)#
#
	#lines(x,y,lwd=2,col="red",type='s')#
	#lines(x1,y1,lwd=2,col="blue")#
	lines(t,u,lwd=2, lty=1,col="blue")#
	lines(t1,u1,lwd=2, lty=2,col="red")
library(Rcpp)#
sourceCpp("confidence_intervals.cpp")#
output <- CI()#
#
C<-output$MLE#
D<-output$SMLE#
E<-output$dens#
CI<-output$CI#
#
a<-3.035140901#
b<-0.002619475#
f <- function(x) {a*b*exp(-b*x^a)*x^(-1+a)}#
#
x1<-E[,1]#
y1<-E[,2]#
u1<-CI[,1]#
u2<-CI[,2]#
u3<-CI[,3]#
x0 <-seq(0,max(x1),by=0.01)#
y0<-f(x0)#
#
plot(c(-10000,-10000),xlim=c(0,14), ylim=c(0.0,max(u3)), main= "", ylab="",xlab="",bty="n",las=1)#
#
lines(x0,y0,lwd=2,lty=2,col="red")#
lines(x1,y1,lty=1,lwd=2,col="blue")#
segments(u1,u2,u1,u3)
library(Rcpp)#
 sourceCpp("intequation.cpp")#
 output <- inteq(6.0)
output$MLE
output$dens
# Simulations of the variances of the density estimate#
# for 1000 samples of n=1000 for a model of the#
# distribution the incubation time#
#
 library(Rcpp)#
 sourceCpp("continuous_model.cpp")#
 output <- simulation()
# Simulations of the variances of the density estimate#
# for 1000 samples of n=1000 for a model of the#
# distribution the incubation time#
#
 library(Rcpp)#
 library(cpp11)#
 sourceCpp("continuous_model.cpp")#
 output <- simulation()
# Simulations of the variances of the density estimate#
# for 1000 samples of n=1000 for a model of the#
# distribution the incubation time#
#
 library(Rcpp)#
 library(Rcpp11)#
 sourceCpp("continuous_model.cpp")#
 output <- simulation()
library(lbfgs)#
   A<-read.table("inputdata_Wuhan.txt")#
   data1<-A[,1]#
   data2<-A[,2]#
   n<-88#
   alpha=vector("numeric",2)#
criterion=function(alpha)#
{#
	calc=0;#
	for (i in 1:n)#
	{#
		calc = calc+log(exp(-alpha[2]*data1[i]^alpha[1])-exp(-alpha[2]*data2[i]^alpha[1]));#
	}#
	return(-calc);#
}#
#
grad=function(alpha)#
{#
	calc1=0;#
	calc2=0;#
	for (i in 1:n)#
	{#
		denom = exp(-alpha[2]*data1[i]^alpha[1])-exp(-alpha[2]*data2[i]^alpha[1]);#
		if (data1[i]==0)#
		{#
			calc1 = calc1+alpha[2]*exp(-alpha[2]*data2[i]^alpha[1])*(data2[i]^alpha[1])*log(data2[i])/denom;#
		}#
		else#
		{#
			calc1 = calc1+alpha[2]*exp(-alpha[2]*data2[i]^alpha[1])*(data2[i]^alpha[1])*log(data2[i])/denom-alpha[2]*exp(-alpha[2]*data1[i]^alpha[1])*(data1[i]^alpha[1])*log(data1[i])/denom;#
		}#
		calc2 = calc2+exp(-alpha[2]*data2[i]^alpha[1])*(data2[i]^alpha[1])/denom-exp(-alpha[2]*data1[i]^alpha[1])*(data1[i]^alpha[1])/denom;#
	}#
	return(c(-calc1,-calc2));#
}#
#
output <- lbfgs(criterion, grad, c(2,0.002))#
output$par
library(lbfgs)#
   A<-read.table("inputdata_Wuhan.txt")#
   data1<-A[,1]#
   data2<-A[,2]#
   n<-88#
   alpha=vector("numeric",2)#
criterion=function(alpha)#
{#
	calc=0;#
	for (i in 1:n)#
	{#
		calc = calc+log(exp(-alpha[2]*data1[i]^alpha[1])-exp(-alpha[2]*data2[i]^alpha[1]));#
	}#
	return(-calc);#
}#
#
grad=function(alpha)#
{#
	calc1=0;#
	calc2=0;#
	for (i in 1:n)#
	{#
		denom = exp(-alpha[2]*data1[i]^alpha[1])-exp(-alpha[2]*data2[i]^alpha[1]);#
		if denom>0)#
		{#
			if (data1[i]==0)#
			{#
			calc1 = calc1+alpha[2]*exp(-alpha[2]*data2[i]^alpha[1])*(data2[i]^alpha[1])*log(data2[i])/denom;#
			}#
			else#
			{#
				calc1 = calc1+alpha[2]*exp(-alpha[2]*data2[i]^alpha[1])*(data2[i]^alpha[1])*log(data2[i])/denom-								alpha[2]*exp(-alpha[2]*data1[i]^alpha[1])*(data1[i]^alpha[1])*log(data1[i])/denom;#
			}#
			calc2 = calc2+exp(-alpha[2]*data2[i]^alpha[1])*(data2[i]^alpha[1])/denom-exp(-alpha[2]*data1[i]^alpha[1])*(data1[i]^alpha[1])/denom;#
		}#
	}#
	return(c(-calc1,-calc2));#
}#
#
output <- lbfgs(criterion, grad, c(2,0.002))#
output$par
library(Rcpp)#
	sourceCpp("Weibull.cpp")#
	sourceCpp("NPMLE_ICM.cpp")#
#
	A<-read.table("inputdata_Wuhan.txt")#
	output1 <- NPMLE(A)#
	output2 <- Weibull(A)#
#
	B1 <- output1$MLE#
	C1 <- output1$SMLE#
	D1 <- output1$dens#
	B2 <- output2$df#
	C2 <- output2$dens#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-B2[,1]	#
	y1<-B2[,2]#
	t<-D1[,1]#
	u<-D1[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(0,14),ylim=c(0,max(u,u1)), main= "",ylab="",xlab="",bty="n",las=1)#
#
	#lines(x,y,lwd=2,col="red",type='s')#
	#lines(x1,y1,lwd=2,col="blue")#
	lines(t,u,lwd=2, lty=1,col="blue")#
	lines(t1,u1,lwd=2, lty=2,col="red")
library(Rcpp)#
 sourceCpp("intequation.cpp")#
 output <- inteq(6.0)
### R-code for phi#
### Piet Groeneboom#
   B<-read.table("phi.txt")#
   x1<-B[,1]#
   y1<-B[,2]#
   y2<-B[,3]#
   a1<-min(x1)#
   b1<-max(x1)#
   a2<-min(y1,y2)#
   b2<-max(y1,y2)#
   plot(c(-10000,-10000),xlim=c(0,20), ylim=c(a2,b2), main= "", ylab="",xlab="",bty="n",las=1)#
   lines(x1, y1,lwd=2,col="red")#
   lines(x1, y2,lwd=2,col="blue",lty=2)
library(Rcpp)#
	sourceCpp("Weibull.cpp")#
	sourceCpp("NPMLE_ICM.cpp")#
#
	A<-read.table("inputdata_Wuhan.txt")#
	output1 <- NPMLE(A)#
	output2 <- Weibull(A)#
#
	B1 <- output1$MLE#
	C1 <- output1$SMLE#
	D1 <- output1$dens#
	B2 <- output2$df#
	C2 <- output2$dens#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-B2[,1]	#
	y1<-B2[,2]#
	t<-D1[,1]#
	u<-D1[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(0,14),ylim=c(0,max(u,u1)), main= "",ylab="",xlab="",bty="n",las=1)#
#
	#lines(x,y,lwd=2,col="red",type='s')#
	#lines(x1,y1,lwd=2,col="blue")#
	lines(t,u,lwd=2, lty=1,col="blue")#
	lines(t1,u1,lwd=2, lty=2,col="red")
output2
library(lbfgs)#
   A<-read.table("inputdata_Wuhan.txt")#
   data1<-A[,1]#
   data2<-A[,2]#
   n<-88#
   alpha=vector("numeric",2)#
criterion=function(alpha)#
{#
	calc=0;#
	for (i in 1:n)#
	{#
		calc = calc+log(exp(-alpha[2]*data1[i]^alpha[1])-exp(-alpha[2]*data2[i]^alpha[1]));#
	}#
	return(-calc);#
}#
#
grad=function(alpha)#
{#
	calc1=0;#
	calc2=0;#
	for (i in 1:n)#
	{#
		denom = exp(-alpha[2]*data1[i]^alpha[1])-exp(-alpha[2]*data2[i]^alpha[1]);#
		if (denom>0)#
		{#
			if (data1[i]==0)#
			{#
			  calc1 = calc1+alpha[2]*exp(-alpha[2]*data2[i]^alpha[1])*(data2[i]^alpha[1])*log(data2[i])/denom;#
			}#
			else#
			{#
				calc1 = calc1+alpha[2]*exp(-alpha[2]*data2[i]^alpha[1])*(data2[i]^alpha[1])*log(data2[i])/denom-alpha[2]*exp(-alpha[2]*data1[i]^alpha[1])*(data1[i]^alpha[1])*log(data1[i])/denom;#
			}#
			calc2 = calc2+exp(-alpha[2]*data2[i]^alpha[1])*(data2[i]^alpha[1])/denom-exp(-alpha[2]*data1[i]^alpha[1])*(data1[i]^alpha[1])/denom;#
		}#
	}#
	return(c(-calc1,-calc2));#
}#
#
output <- lbfgs(criterion, grad, c(2,0.002))#
output$par
library(Rcpp)#
	sourceCpp("Weibull.cpp")#
	sourceCpp("NPMLE_ICM.cpp")#
#
	A<-read.table("inputdata_Wuhan.txt")#
	output1 <- NPMLE(A)#
	output2 <- Weibull(A)#
#
	B1 <- output1$MLE#
	C1 <- output1$SMLE#
	D1 <- output1$dens#
	B2 <- output2$df#
	C2 <- output2$dens#
#
	x<-B1[,1]#
	y<-B1[,2]#
	x1<-B2[,1]	#
	y1<-B2[,2]#
	t<-D1[,1]#
	u<-D1[,2]#
	t1<-C2[,1]	#
	u1<-C2[,2]	#
plot(c(-1000,-1000),xlim=c(0,14),ylim=c(0,max(u,u1)), main= "",ylab="",xlab="",bty="n",las=1)#
#
	#lines(x,y,lwd=2,col="red",type='s')#
	#lines(x1,y1,lwd=2,col="blue")#
	lines(t,u,lwd=2, lty=1,col="blue")#
	lines(t1,u1,lwd=2, lty=2,col="red")
output2
