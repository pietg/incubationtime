head(rubella)
##        t freq1 freq2
## 1 0.2740     0     1
## 2 0.3781     0     1
## 3 0.5288     0     1
## 4 0.5342     0     1
## 5 0.9452     1     1
## 6 0.9479     0     1
summary(rubella$t)
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
##   0.274   8.868  25.595  28.970  44.888  80.118
grid<-1:80
bw<-ComputeBW(data=rubella,x=grid)
out<-ComputeConfIntervals(data=rubella,x=grid,alpha=0.05, bw=bw)
The SMLE increases steeply in the ages before adulthood which is in line with the fact that rubella is considered as a childhood disease.
left<-out$CI[,1]
right<-out$CI[,2]
plot(grid, out$SMLE,type='l', ylim=c(0,1), main="",ylab="",xlab="",las=1)
lines(grid, left, col=4)
lines(grid, right, col=4)
segments(grid,left, grid, right)
References
Groeneboom, P., and K. Hendrickx. 2017. “The Nonparametric Bootstrap for the Current Status Model.” Electron. J. Statist. 11 (2): 3446–84. doi:10.1214/17-EJS1345.
Groeneboom, P., and G. Jongbloed. 2014. Nonparametric Estimation Under Shape Constraints. Cambridge: Cambridge Univ. Press.
Keiding, N., K. Begtrup, T.H. Scheike, and G. Hasibeder. 1996. “Estimation from Current Status Data in Continuous Time.” Lifetime Data Anal. 2: 119–29.
Keiding, Niels. 1991. “Age-Specific Incidence and Prevalence: A Statistical Perspective.” J. Roy. Statist. Soc. Ser. A 154 (3): 371–412. doi:10.2307/2983150.
Rcpp::sourceCpp('Xcode_projects/k-monotone/1_monotone.cpp')
Rcpp::sourceCpp('Xcode_projects/TestBoost/TestBoost/main.cpp')
Rcpp::sourceCpp('Xcode_projects/TestBoost/TestBoost/main.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/log_normal.cpp')
install.packages("optim.functions")
install.packages("nloptr")
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/continuous_model.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_df.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_df.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_df.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
demo()
install.packages("EpiEstim")
demo()
library(EpiEstim)
library(EpiEstim)
library(ggplot2)
## load data
data(Flu2009)
## incidence:
head(Flu2009$incidence)
#>        dates I
#> 1 2009-04-27 1
#> 2 2009-04-28 1
#> 3 2009-04-29 0
#> 4 2009-04-30 2
#> 5 2009-05-01 5
#> 6 2009-05-02 3
## serial interval (SI) distribution:
Flu2009$si_distr
#>  [1] 0.000 0.233 0.359 0.198 0.103 0.053 0.027 0.014 0.007 0.003 0.002 0.001
## interval-ceonsored serial interval data:
## each line represents a transmission event,
## EL/ER show the lower/upper bound of the symptoms onset date in the infector
## SL/SR show the same for the secondary case
## type has entries 0 corresponding to doubly interval-censored data
## (see Reich et al. Statist. Med. 2009).
head(Flu2009$si_data)
#>   EL ER SL SR type
#> 1  0  1  7  8    0
#> 2  0  1  2  3    0
#> 3  0  1  3  4    0
#> 4  0  1  2  5    0
#> 5  0  1  1  9    0
#> 6  0  1  2  4    0
library(incidence)
plot(as.incidence(Flu2009$incidence$I, dates = Flu2009$incidence$dates))
demo()
demo(package="EpiEstimi")
install.packages("EpiEstim")
demo(package="EpiEstimi")
demo(package="EpiEstim")
demo(package="curstatCI")
install.packages("markdown")
install.packages("R0")
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
source('~/Xcode_projects/interval_censoring/bootstrap/CI_bootstrap_Sen_Xu.R')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
source('~/Xcode_projects/interval_censoring/bootstrap2/CI_bootstrap_Sen_Xu.R')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_Sen_Xu2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_Sen_Xu2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_Sen_Xu2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
source('~/Xcode_projects/incubationtime_copy/bootstrap/CI_bootstrap_SMLE2.R')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/main_smooth_bootstrap.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/main_smooth_bootstrap.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
B <- output$MLE
library(Rcpp)
sourceCpp("curstat_bootstrapSMLE.cpp")
output <- ComputeIntervals()
B <- output$MLE
C <- output$SMLE
D <- output$CI_SMLE
E <- output$percentages
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
z2<-C[,2]
x3<-D[,1]
t1<-D[,2]
u1<-D[,3]
plot(c(-100,-100),xlim=c(0,2), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,z1,lwd=2,type ="s",col="red")
lines(x2, z2,lwd=2,col="blue")
segments(x3,t1,x3,u1)
x1<-E[,1]
y1<-E[,2]
plot(c(-10000,-10000),xlim=c(0.0,2), ylim=c(0.0,0.2), main= "", ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lty=1)
lines(c(0,2),c(0.05,0.05),col="red")
library(Rcpp)
sourceCpp("curstat_bootstrapSMLE.cpp")
output <- ComputeIntervals()
B <- output$MLE
C <- output$SMLE
D <- output$CI_SMLE
E <- output$percentages
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
z2<-C[,2]
x3<-D[,1]
t1<-D[,2]
u1<-D[,3]
plot(c(-100,-100),xlim=c(0,2), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,z1,lwd=2,type ="s",col="red")
lines(x2, z2,lwd=2,col="blue")
segments(x3,t1,x3,u1)
x1<-E[,1]
y1<-E[,2]
plot(c(-10000,-10000),xlim=c(0.0,2), ylim=c(0.0,0.2), main= "", ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lty=1)
lines(c(0,2),c(0.05,0.05),col="red")
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
source('~/Xcode_projects/interval_censoring/bootstrap2/MSE_SMLE.R')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
library(Rcpp)
sourceCpp("curstat_bootstrapSMLE.cpp")
output <- ComputeIntervals()
B <- output$MLE
C <- output$SMLE
D <- output$CI_SMLE
E <- output$percentages
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
z2<-C[,2]
x3<-D[,1]
t1<-D[,2]
u1<-D[,3]
plot(c(-100,-100),xlim=c(0,max(x1)), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,z1,lwd=2,type ="s",col="red")
lines(x2, z2,lwd=2,col="blue")
segments(x3,t1,x3,u1)
x1<-E[,1]
y1<-E[,2]
plot(c(-10000,-10000),xlim=c(0.0,2), ylim=c(0.0,0.15), main= "", ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lty=1)
lines(c(0,2),c(0.05,0.05),col="red")
library(Rcpp)
sourceCpp("curstat_bootstrapSMLE.cpp")
output <- ComputeIntervals()
B <- output$MLE
C <- output$SMLE
D <- output$CI_SMLE
E <- output$percentages
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
z2<-C[,2]
x3<-D[,1]
t1<-D[,2]
u1<-D[,3]
plot(c(-100,-100),xlim=c(0,max(x1)), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,z1,lwd=2,type ="s",col="red")
lines(x2, z2,lwd=2,col="blue")
segments(x3,t1,x3,u1)
x1<-E[,1]
y1<-E[,2]
plot(c(-10000,-10000),xlim=c(0.0,2), ylim=c(0.0,0.15), main= "", ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lty=1)
lines(c(0,2),c(0.05,0.05),col="red")
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
library(Rcpp)
library(curstatCI)
# sample size
n <- 1000
# truncated exponential distribution on (0,2)
set.seed(100)
t <- rep(NA, n)
delta <- rep(NA, n)
for(i in (1:n) ){
x<-runif(1)
y<--log(1-(1-exp(-2))*x)
t[i]<-2*runif(1);
if(y<=t[i]){ delta[i]<-1}
else{delta[i]<-0}}
A<-cbind(t[order(t)], delta[order(t)], rep(1,n))
# x vector
grid<-seq(0.1,1.9 ,by = 0.1)
# data-driven bandwidth vector
bw <- ComputeBW(data =A, x = grid)
plot(grid, bw)
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
library(Rcpp)
sourceCpp("curstat_bootstrapSMLE.cpp")
output <- ComputeIntervals()
B1 <- output$MLE
C1 <- output$SMLE
D1 <- output$CI_SMLE
E1 <- output$percentages
B<-read.table("MLE.txt")
C<-read.table("SMLE.txt")
D<-read.table("CI_SMLE.txt")
E<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
z2<-C[,2]
x3<-D[,1]
t1<-D[,2]
u1<-D[,3]
f <- function(x) {1-exp(-x)}/{1-exp(-2)}
x0 <-seq(0,2,by=0.01)
y0<-f(x0)
plot(c(-100,-100),xlim=c(0,2), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type ="s",col="red")
lines(x2, z2,lwd=2,col="blue")
lines(x0, y0,lwd=2,lty=2)
segments(x3,t1,x3,u1)
x1<-E[,1]
y1<-E[,2]
plot(c(-10000,-10000),xlim=c(0,2), ylim=c(0.0,0.5), main= "", ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lty=1)
lines(c(0,2),c(0.05,0.05),col="red")
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
library(Rcpp)
sourceCpp("curstat_bootstrapSMLE.cpp")
output <- ComputeIntervals()
B1 <- output$MLE
C1 <- output$SMLE
D1 <- output$CI_SMLE
E1 <- output$percentages
B<-read.table("MLE.txt")
C<-read.table("SMLE.txt")
D<-read.table("CI_SMLE.txt")
E<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
z2<-C[,2]
x3<-D[,1]
t1<-D[,2]
u1<-D[,3]
f <- function(x) {1-exp(-x)}/{1-exp(-2)}
x0 <-seq(0,2,by=0.01)
y0<-f(x0)
plot(c(-100,-100),xlim=c(0,2), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type ="s",col="red")
lines(x2, z2,lwd=2,col="blue")
lines(x0, y0,lwd=2,lty=2)
segments(x3,t1,x3,u1)
x1<-E[,1]
y1<-E[,2]
plot(c(-10000,-10000),xlim=c(0,2), ylim=c(0.0,0.5), main= "", ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lty=1)
lines(c(0,2),c(0.05,0.05),col="red")
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation1.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation1.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation1.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation1.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation1.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/results2/curstat_bootstrapSMLE.cpp')
install.packages("Rcpp")
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/results2/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation1.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/CI_SMLE/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/CI_SMLE/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/CI_SMLE/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/CI_SMLE/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/CI_SMLE/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/CI_SMLE/bootstrap_SMLE.cpp')
source('~/Xcode_projects/incubationtime_copy/CI_SMLE/sim_CI_SMLE.R')
library(Rcpp)
sourceCpp("NPMLE_SR_single.cpp")
#95% confidence intervals for 1000 samples of 1000 observations
output <- CI_NPMLE()
# the MLE for the last sample
B <- output$MLE
# the 95% confidennce intervals for the last sample
C <- output$CI_MLE
# coverages of the 1000 confidence intervals
D <- output$percentages
# the first column of E gives n times the variances over
#	the 1000 samples
# the second column gives the diagonals of the inverse Fisher
# 	information matrix:
E <- output$Variances
y1<-C[,1]
y2<-C[,2]
y3<-C[,3]
y4<-C[,4]
y5<-C[,5]
plot(c(-10000,-10000),xlim=c(3,10), ylim=c(0.0,max(y3)), main= "", ylab="",xlab="",bty="n",las=1)
points(y1,y2,col="red",pch = 20, cex = 1.5)
points(y1,y3,col="black",pch = 20, cex = 1.5)
segments(y1,y4,y1,y5,lwd=2)
lines(y1,y2,lwd=2,lty=2,col="red")
u1<-D[,1]
v1<-D[,2]
plot(c(-10000,-10000),xlim=c(3,10), ylim=c(0.5,1), main= "", ylab="",xlab="",bty="n",las=1)
lines(u1,v1,lty=1,lwd=2)
lines(c(min(u1),max(u1)),c(0.95,0.95),col="red",lty=2,lwd=2)
y1<-C[,1]
y2<-C[,2]
y3<-C[,3]
y4<-C[,4]
y5<-C[,5]
plot(c(-10000,-10000),xlim=c(3,10), ylim=c(0.0,max(y3)), main= "", ylab="",xlab="",bty="n",las=1)
points(y1,y2,col="red",pch = 20, cex = 1.5)
points(y1,y3,col="black",pch = 20, cex = 1.5)
segments(y1,y4,y1,y5,lwd=2)
lines(y1,y2,lwd=2,lty=2,col="red")
