set.seed(100)#
#
n<-1000#
t<-rep(NA, n)#
delta<-rep(NA, n)#
#
for(i in (1:n) ){#
  x<-runif(1)#
  y<--log(1-(1-exp(-2))*x)#
  t[i]<-2*runif(1);#
  if(y<=t[i]){ delta[i]<-1}#
  else{delta[i]<-0}}
A<-cbind(t[order(t)], delta[order(t)], rep(1,n))#
head(A)
library(Rcpp)#
library(curstatCI)#
#
mle<-ComputeMLE(data=A)#
mle
plot(mle$x, mle$mle,type='s', ylim=c(0,1),xlim=c(0,2), main="",ylab="",xlab="",las=1)
grid<-seq(0.02,1.98, 0.02)#
bw<-rep(2*n^-0.2,length(grid))#
smle<-ComputeSMLE(data=A, x=grid, bw=bw)#
plot(grid, smle,type='l', ylim=c(0,1), main="",ylab="",xlab="",las=1)#
lines(grid, (1-exp(-grid))/(1-exp(-2.0)), col=2, lty=2)
c(min(t),max(t))
grid<-seq(0.01,1.99 ,by=0.01)
bw<-ComputeBW(data=A, x=grid)
plot(grid, bw, main="",ylim=c(0.5,0.7),ylab="",xlab="",las=1)
out<-ComputeConfIntervals(data=A,x=grid,alpha=0.05, bw=bw)
attributes(out)## $names#
## [1] "MLE"            "SMLE"           "CI"             "Studentized"   #
## [5] "NonStudentized"out$NonStudentized
left<-out$CI[,1]#
right<-out$CI[,2] #
#
plot(grid, out$SMLE,type='l', ylim=c(0,1), main="",ylab="",xlab="",las=1)#
lines(grid, left, col=4)#
lines(grid, right, col=4)#
segments(grid,left, grid, right)#
lines(grid, (1-exp(-grid))/(1-exp(-2.0)), col=2)
data(hepatitisA)#
head(hepatitisA)##   t freq1 freq2#
## 1 1     3    16#
## 2 2     3    15#
## 3 3     3    16#
## 4 4     4    13#
## 5 5     7    12#
## 6 6     4    15
grid<-1:75#
#
bw<-ComputeBW(data=hepatitisA,x=grid)#
out<-ComputeConfIntervals(data=hepatitisA,x=grid,alpha=0.05, bw=bw)
out$SMLE[18]## [1] 0.5109369left<-out$CI[,1]#
right<-out$CI[,2]#
#
plot(grid, out$SMLE,type='l', ylim=c(0,1), main="",ylab="",xlab="",las=1)#
lines(grid, left, col=4)#
lines(grid, right, col=4)#
segments(grid,left, grid, right)
data(hepatitisA)#
head(hepatitisA)##   t freq1 freq2#
## 1 1     3    16#
## 2 2     3    15#
## 3 3     3    16#
## 4 4     4    13#
## 5 5     7    12#
## 6 6     4    15
grid<-1:75#
#
bw<-ComputeBW(data=hepatitisA,x=grid)#
out<-ComputeConfIntervals(data=hepatitisA,x=grid,alpha=0.05, bw=bw)
out$SMLE[18]## [1] 0.5109369left<-out$CI[,1]#
right<-out$CI[,2]#
#
plot(grid, out$SMLE,type='l', ylim=c(0,1), main="",ylab="",xlab="",las=1)#
lines(grid, left, col=4)#
lines(grid, right, col=4)#
segments(grid,left, grid, right)
out$NonStudentized
data(rubella)#
head(rubella)##        t freq1 freq2#
## 1 0.2740     0     1#
## 2 0.3781     0     1#
## 3 0.5288     0     1#
## 4 0.5342     0     1#
## 5 0.9452     1     1#
## 6 0.9479     0     1
summary(rubella$t)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. #
##   0.274   8.868  25.595  28.970  44.888  80.118
grid<-1:80#
bw<-ComputeBW(data=rubella,x=grid)#
out<-ComputeConfIntervals(data=rubella,x=grid,alpha=0.05, bw=bw)The SMLE increases steeply in the ages before adulthood which is in line with the fact that rubella is considered as a childhood disease.left<-out$CI[,1]#
right<-out$CI[,2]#
#
plot(grid, out$SMLE,type='l', ylim=c(0,1), main="",ylab="",xlab="",las=1)#
lines(grid, left, col=4)#
lines(grid, right, col=4)#
segments(grid,left, grid, right)
C<-read.table("MLE.txt")#
   	D<-read.table("CI_SMLE.txt")#
   	E<-read.table("SMLE.txt")#
 	a<-3.035140901#
   	b<-0.002619475#
   	f <- function(x) {(1-exp(-b*x^a))/(1-exp(-b*20^a))}#
   	x1<-C[,1]#
   	y1<-C[,2]#
   	x2<-D[,1]#
   	y2<-D[,2]#
   	y3<-D[,3]#
   	z1<-E[,1]#
   	z2<-E[,2]#
   	x0 <-seq(0,15,by=0.01)#
   	y0<-f(x0)#
   	plot(c(-10000,-10000),xlim=c(0,15), ylim=c(0.0,max(y3)), main= "", ylab="",xlab="",bty="n",las=1)#
#
	#lines(x1, y1,lty=1,lwd=2,col="blue",type='s')#
	lines(z1,z2,lwd=2,col="blue")#
	lines(x0,y0,lwd=2,lty=2,col="red")#
	segments(x2,y2,x2,y3,lwd=2)#
   	#segments(x2,t1,x2,t1)#
   	#segments(x2,u1,x2,u1)
E<-read.table("percentages.txt") #
   	x1<-E[,1]#
   	y1<-E[,2]#
   	plot(c(-10000,-10000),xlim=c(0,2), ylim=c(0.0,0.2), main= "", ylab="",xlab="",bty="n",las=1)#
	lines(x1,y1,lty=1,lwd=2)#
	lines(c(min(x1),max(x1)),c(0.05,0.05),col="red",lty=2,lwd=2)
C<-read.table("MSE.txt")#
   	x<-C[,1]#
   	y<-C[,2]#
   	#D<-read.table("MSE0.txt")#
   	#x1<-D[,1]#
   	#y1<-D[,2]#
    plot(c(-10000,-10000),xlim=c(0,2), ylim=c(0,1), main= "", ylab="",xlab="",bty="n",las=1)#
#
	lines(x,y,lty=1,lwd=2,col="blue")#
	#lines(x1,y1,lty=1,lwd=2)
library(Rcpp)#
	sourceCpp("curstat_bootstrapSMLE.cpp")#
  	output <- ComputeIntervals(N=100,NumB=500)#
	B1 <- output$MLE#
	C1 <- output$SMLE#
	D1 <- output$CI_SMLE#
	E1 <- output$percentages#
	B<-read.table("MLE.txt")#
	C<-read.table("SMLE.txt")#
   	D<-read.table("CI_SMLE.txt")#
   	E<-read.table("percentages.txt")#
   x1<-B[,1]#
   z1<-B[,2]#
   x2<-C[,1]#
   z2<-C[,2]#
   x3<-D[,1]#
   t1<-D[,2]#
   u1<-D[,3]#
   f <- function(x) {1-exp(-x)}/{1-exp(-2)}#
   x0 <-seq(0,2,by=0.01)#
   y0<-f(x0)#
   plot(c(-100,-100),xlim=c(0,2), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)#
   lines(x1,z1,lwd=2,type ="s",col="red")#
   lines(x2, z2,lwd=2,col="blue")#
   lines(x0, y0,lwd=2,lty=2)#
   segments(x3,t1,x3,u1)#
   	x1<-E[,1]#
   	y1<-E[,2]#
   	plot(c(-10000,-10000),xlim=c(0,2), ylim=c(0.0,0.5), main= "", ylab="",xlab="",bty="n",las=1)#
	lines(x1,y1,lty=1)#
	lines(c(0,2),c(0.05,0.05),col="red")
library(Rcpp)#
	sourceCpp("credible_intervals.cpp")#
	n=100#
	J=floor(n^(1/3)*log(n));#
  output <- credible(N=n,J1=J)#
	B1 <- output$post_mean#
	C1 <- output$CI_LSE#
	D1 <- output$percentages#
	B<-read.table("post_mean.txt")#
  	C<-read.table("CI_LSE.txt")#
  	D<-read.table("percentages.txt")#
   x1<-B[,1]#
   z1<-B[,2]#
   x2<-C[,1]#
   y1<-C[,2]#
   y2<-C[,3]#
   f <- function(x) {x^2+x/5}#
   x0 <-seq(0,1,by=0.01)#
   y0<-f(x0)#
   plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y1),max(y2)), main= "",ylab="",xlab="",bty="n",las=1)#
   #lines(x1,z1,lwd=2,type ="s",col="red")#
   lines(x0, y0,lwd=2,lty=2,col="red")#
   lines(x2,y1,lwd=1,lty=1,type='s')#
   lines(x2,y2,lwd=1,lty=1,type='s')#
   segments(x2,y1,x2,y2)#
   	u<-D[,1]#
   	v<-D[,2]#
   	plot(c(-10000,-10000),xlim=c(0.0,1.0), ylim=c(0.0,0.5), main= "", ylab="",xlab="",bty="n",las=1)#
	lines(u,v,lty=1)#
	lines(c(0,1),c(0.05,0.05),col="red")
B<-read.table("CI_SLSE.txt")#
   	x<-B[,1]#
   	y<-B[,2]#
    C<-read.table("LSE.txt")#
   	D<-read.table("CI_SLSE.txt")#
   	E<-read.table("SLSE.txt")#
   	f <- function(x) {x^2+x/5}#
   	x1<-C[,1]#
   	y1<-C[,2]#
   	x2<-D[,1]#
   	y2<-D[,2]#
   	y3<-D[,3]#
   	y4<-D[,4]#
   	z1<-E[,1]#
   	z2<-E[,2]#
   	x0 <-seq(0,1,by=0.01)#
   	y0<-f(x0)#
   	plot(c(-10000,-10000),xlim=c(0,1), ylim=c(min(y3),max(y4)), main= "", ylab="",xlab="",bty="n",las=1)#
#
	#lines(x1, y1,lty=1,lwd=2,col="blue",type='s')#
	lines(x2,y2,lwd=2,col="blue")#
	lines(x2,y3,lwd=1,lty=1)#
	lines(x2,y4,lwd=1,lty=1)#
	lines(x0,y0,lwd=3,lty=2,col="red")#
	segments(x2,y3,x2,y4,lwd=1)#
	#points(x,y,pch = 20)
B<-read.table("CI_SLSE.txt")#
		   	x<-B[,1]#
		   	y<-B[,2]#
		    C<-read.table("LSE.txt")#
		   	D<-read.table("CI_SLSE.txt")#
		   	E<-read.table("SLSE.txt")#
		   	f <- function(x) {x^2+x/5}#
		   	x1<-C[,1]#
		   	y1<-C[,2]#
		   	x2<-D[,1]#
		   	y2<-D[,2]#
		   	y3<-D[,3]#
		   	y4<-D[,4]#
		   	z1<-E[,1]#
		   	z2<-E[,2]#
		   	x0 <-seq(0.0,1,by=0.01)#
		   	y0<-f(x0)#
		   	plot(c(-10000,-10000),xlim=c(0,1), ylim=c(min(y3),max(y4)), main= "", ylab="",xlab="",bty="n",las=1)#
			#lines(x1, y1,lty=1,lwd=2,col="blue",type='s')#
			lines(x2,y2,lwd=2,col="blue")#
			lines(x2,y3,lwd=1,lty=1)#
			lines(x2,y4,lwd=1,lty=1)#
			lines(x0,y0,lwd=3,lty=2,col="red")#
			segments(x2,y3,x2,y4,lwd=1)#
			#points(x,y,pch = 20)
set.seed(100)#
#
n<-1000#
t<-rep(NA, n)#
delta<-rep(NA, n)#
#
for(i in (1:n) ){#
  x<-runif(1)#
  y<--log(1-(1-exp(-2))*x)#
  t[i]<-2*runif(1);#
  if(y<=t[i]){ delta[i]<-1}#
  else{delta[i]<-0}}
A<-cbind(t[order(t)], delta[order(t)], rep(1,n))#
head(A)##              [,1] [,2] [,3]#
## [1,] 0.0007901406    0    1#
## [2,] 0.0064286250    0    1#
## [3,] 0.0075551583    0    1#
## [4,] 0.0121238651    0    1#
## [5,] 0.0150197768    0    1#
## [6,] 0.0179643347    0    1
library(Rcpp)#
library(curstatCI)#
#
mle<-ComputeMLE(data=A)#
mle
plot(mle$x, mle$mle,type='s', ylim=c(0,1),xlim=c(0,2), main="",ylab="",xlab="",las=1)
grid<-seq(0.02,1.98, 0.02)#
bw<-rep(2*n^-0.2,length(grid))#
smle<-ComputeSMLE(data=A, x=grid, bw=bw)#
plot(grid, smle,type='l', ylim=c(0,1), main="",ylab="",xlab="",las=1)#
lines(grid, (1-exp(-grid))/(1-exp(-2.0)), col=2, lty=2)
c(min(t),max(t))## [1] 0.0007901406 1.9997072918grid<-seq(0.01,1.99 ,by=0.01)
bw<-ComputeBW(data=A, x=grid)## The computations took    4.025   secondsplot(grid, bw, main="",ylim=c(0.5,0.7),ylab="",xlab="",las=1)
plot(grid, bw, main="",ylim=c(0.5,0.7),ylab="",xlab="",las=1)
out<-ComputeConfIntervals(data=A,x=grid,alpha=0.05, bw=bw)
## The program produces the Studentized nonparametric bootstrap confidence intervals for the cdf, using the SMLE.#
## #
## Number of unique observations:   1000#
## Sample size n = 1000#
## Number of Studentized Intervals = 199#
## Number of Non-Studentized Intervals = 0#
## The computations took    4.075   seconds
attributes(out)## $names#
## [1] "MLE"            "SMLE"           "CI"             "Studentized"   #
## [5] "NonStudentized"
out$NonStudentized
left<-out$CI[,1]#
right<-out$CI[,2] #
#
plot(grid, out$SMLE,type='l', ylim=c(0,1), main="",ylab="",xlab="",las=1)#
lines(grid, left, col=4)#
lines(grid, right, col=4)#
segments(grid,left, grid, right)#
lines(grid, (1-exp(-grid))/(1-exp(-2.0)), col=2)
install.packages("np")#
library(np) # non parametric library#
data(cps71)#
attach(cps71)#
#
m <- npreg(logwage~age)#
#
plot(m, plot.errors.method="asymptotic",#
     plot.errors.style="band",#
     ylim=c(11, 15.2))#
#
points(age, logwage, cex=.25)
B<-read.table("data_Mend.txt")#
		   	x<-B[,1]#
		   	y<-B[,2]#
		   	D<-read.table("CI_SLSE.txt")#
#
		 	f <- function(x) {x^2+x/5}#
		   	#f <- function(x) {467.10203 - 0.18829*x }#
		   	#f <- function(x) {exp(4 * (x - 0.5))/(1+exp(4 * (x - 0.5)))}#
		   	x1<-D[,1]#
		   	y1<-D[,2]#
		   	x2<-D[,1]#
		   	y2<-D[,2]#
		   	y3<-D[,3]#
		   	y4<-D[,4]#
		   	x0 <-seq(0.0,1,by=0.01)#
		   	y0<-f(x0)#
		   	plot(c(-10000,-10000),xlim=c(min(x1),max(x1)), ylim=c(min(y3),max(y4)), main= "", ylab="",xlab="",bty="n",las=1)#
			#lines(z1, z2,lty=1,lwd=2,col="blue")#
			lines(x2,y2,lwd=2,col="blue")#
			lines(x2,y3,lwd=1,lty=1)#
			lines(x2,y4,lwd=1,lty=1)#
			lines(x0,y0,lwd=3,lty=2,col="red")#
			segments(x2,y3,x2,y4,lwd=1)#
			#points(x,y,pch = 20) #
			#box(col = "black")#
			box(which = "plot", lty = "solid")
X <- matrix(rnorm(2000), ncol = 2)#
plot(X, cex = 0.5)#
hpts <- chull(X)#
hpts <- c(hpts, hpts[1])#
lines(X[hpts, ])
x <- runif(30)#
  y <- runif(30)#
  w <- convexhull.xy(x,y)#
  plot(owin(), main="convexhull.xy(x,y)", lty=2)#
  plot(w, add=TRUE)#
  points(x,y)#
#
  X <- runifrect(30)#
  plot(X, main="convexhull.xy(X)")#
  plot(convexhull.xy(X), add=TRUE)
x <- runif(30)#
  y <- runif(30)#
  w <- convexhull.xy(x,y)#
  plot(owin(), main="convexhull.xy(x,y)", lty=2)#
  plot(w, add=TRUE)#
  points(x,y)
X <- runifrect(30)#
  plot(X, main="convexhull.xy(X)")#
  plot(convexhull.xy(X), add=TRUE)
x <- runif(30)#
  y <- runif(30)#
  w <- convexhull.xy(x,y)#
  plot(owin(), main="convexhull.xy(x,y)", lty=2)#
  plot(w, add=TRUE)#
  points(x,y)
x <- runif(100)#
  y <- runif(100)#
  w <- convexhull.xy(x,y)#
  plot(owin(), main="convexhull.xy(x,y)", lty=2)#
  plot(w, add=TRUE)#
  points(x,y)
x <- runif(1000)#
  y <- runif(1000)#
  w <- convexhull.xy(x,y)#
  plot(owin(), main="convexhull.xy(x,y)", lty=2)#
  plot(w, add=TRUE)#
  points(x,y)
x <- runif(100)#
  y <- runif(1000)#
  w <- convexhull.xy(x,y)#
  plot(owin(), main="convexhull.xy(x,y)", lty=2)#
  plot(w, add=TRUE)#
  points(x,y)
x <- runif(100)#
  y <- runif(100)#
  w <- convexhull.xy(x,y)#
  plot(owin(), main="convexhull.xy(x,y)", lty=2)#
  plot(w, add=TRUE)#
  points(x,y)
x <- runif(100)#
  y <- runif(100)#
  w <- convexhull.xy(x,y)#
  plot(owin(), main="convexhull.xy(x,y)", lty=2,bty="n'")#
  plot(w, add=TRUE)#
  points(x,y)
x <- runif(100)#
  y <- runif(100)#
  w <- convexhull.xy(x,y)#
  plot(owin(), main="convexhull.xy(x,y)", lty=2,bty="n'")#
  plot(w, add=TRUE)#
  points(x,y)#
#
  X <- runifrect(100)#
  plot(X, main="convexhull.xy(X)")#
  plot(convexhull.xy(X), add=TRUE)
x <- runif(100)#
  y <- runif(100)#
  w <- convexhull.xy(x,y)#
  plot(owin(), main="convexhull.xy(x,y)", lty=2,bty="n'")#
  plot(w, add=TRUE)#
  points(x,y)#
#
  X <- runifrect(100)#
  plot(X, main="")#
  plot(convexhull.xy(X), add=TRUE)
x <- runif(100)#
  y <- runif(100)#
  w <- convexhull.xy(x,y)#
  plot(owin(), main="convexhull.xy(x,y)", lty=2,bty="n'")#
  plot(w, add=TRUE)#
  points(x,y)#
#
  X <- runifrect(1)#
  plot(X, main="")#
  plot(convexhull.xy(X), add=TRUE)
x <- runif(100)#
  y <- runif(100)#
  w <- convexhull.xy(x,y)#
  plot(owin(), main="convexhull.xy(x,y)", lty=2,bty="n'")#
  plot(w, add=TRUE)#
  points(x,y)#
#
  X <- runifrect(100)#
  plot(X, main="")#
  plot(convexhull.xy(X), add=TRUE)
library(Rcpp)#
	sourceCpp("NPMLE_SR_double.cpp")#
	#95% confidence intervals for 1000 samples of 1000 observations#
	output <- CI_NPMLE()#
	# the MLE for the last sample#
	B <- output$MLE#
	# the 95% confidennce intervals for the last sample#
	C <- output$CI_MLE#
	# coverages of the 1000 confidence intervals#
	D <- output$percentages#
	# the first column of E gives n times the variances over #
	#	the 1000 samples#
	# the second column gives the diagonals of the inverse Fisher#
	# 	information matrix:#
	E <- output$Variances#
	y1<-C[,1]#
	y2<-C[,2]#
	y3<-C[,3]#
	y4<-C[,4]#
	y5<-C[,5]#
	plot(c(-10000,-10000),xlim=c(3,10), ylim=c(0.0,max(y3)), main= "", ylab="",xlab="",bty="n",las=1)#
	points(y1,y2,col="red",pch = 20, cex = 1.5)#
	points(y1,y3,col="black",pch = 20, cex = 1.5)#
	segments(y1,y4,y1,y5,lwd=2)#
	lines(y1,y2,lwd=2,lty=2,col="red")#
	u1<-D[,1]#
	v1<-D[,2]#
	plot(c(-10000,-10000),xlim=c(3,10), ylim=c(0.5,1), main= "", ylab="",xlab="",bty="n",las=1)#
	lines(u1,v1,lty=1,lwd=2)#
	lines(c(min(u1),max(u1)),c(0.95,0.95),col="red",lty=2,lwd=2)
y1<-C[,1]#
	y2<-C[,2]#
	y3<-C[,3]#
	y4<-C[,4]#
	y5<-C[,5]#
	plot(c(-10000,-10000),xlim=c(3,10), ylim=c(0.0,max(y3)), main= "", ylab="",xlab="",bty="n",las=1)#
	points(y1,y2,col="red",pch = 20, cex = 1.5)#
	points(y1,y3,col="black",pch = 20, cex = 1.5)#
	segments(y1,y4,y1,y5,lwd=2)#
	lines(y1,y2,lwd=2,lty=2,col="red")
library(Rcpp)#
	sourceCpp("NPMLE_SR_single.cpp")#
	#95% confidence intervals for 1000 samples of 1000 observations#
	output <- CI_NPMLE()#
	# the MLE for the last sample#
	B <- output$MLE#
	# the 95% confidennce intervals for the last sample#
	C <- output$CI_MLE#
	# coverages of the 1000 confidence intervals#
	D <- output$percentages#
	# the first column of E gives n times the variances over #
	#	the 1000 samples#
	# the second column gives the diagonals of the inverse Fisher#
	# 	information matrix:#
	E <- output$Variances#
	y1<-C[,1]#
	y2<-C[,2]#
	y3<-C[,3]#
	y4<-C[,4]#
	y5<-C[,5]#
	plot(c(-10000,-10000),xlim=c(3,10), ylim=c(0.0,max(y3)), main= "", ylab="",xlab="",bty="n",las=1)#
	points(y1,y2,col="red",pch = 20, cex = 1.5)#
	points(y1,y3,col="black",pch = 20, cex = 1.5)#
	segments(y1,y4,y1,y5,lwd=2)#
	lines(y1,y2,lwd=2,lty=2,col="red")#
	u1<-D[,1]#
	v1<-D[,2]#
	plot(c(-10000,-10000),xlim=c(3,10), ylim=c(0.5,1), main= "", ylab="",xlab="",bty="n",las=1)#
	lines(u1,v1,lty=1,lwd=2)#
	lines(c(min(u1),max(u1)),c(0.95,0.95),col="red",lty=2,lwd=2)
y1<-C[,1]#
	y2<-C[,2]#
	y3<-C[,3]#
	y4<-C[,4]#
	y5<-C[,5]#
	plot(c(-10000,-10000),xlim=c(3,10), ylim=c(0.0,max(y3)), main= "", ylab="",xlab="",bty="n",las=1)#
	points(y1,y2,col="red",pch = 20, cex = 1.5)#
	points(y1,y3,col="black",pch = 20, cex = 1.5)#
	segments(y1,y4,y1,y5,lwd=2)#
	lines(y1,y2,lwd=2,lty=2,col="red")
