n=1000
J=floor(n^(1/3)*log(n))
zeta <- rep(0,J)
lambda_sq <- rep(100,J)
output <- credible(n,J,zeta,lambda_sq)
B <- output$posterior_mean
C <- output$CI_LSE
D <- output$percentages
#B<-read.table("posterior_mean.txt")
#C<-read.table("CI_LSE.txt")
#D<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
y1<-C[,2]
y2<-C[,3]
y3<-C[,4]
f <- function(x) {x^2+x/5}
x0 <-seq(0,1,by=0.01)
y0<-f(x0)
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type ="s",col="blue")
#lines(x2,y1,lwd=2,col="blue",type='s')
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
u<-D[,1]
v<-D[,2]
plot(c(-10000,-10000),xlim=c(0.0,1.0), ylim=c(0.0,0.5), main= "", ylab="",xlab="",bty="n",las=1)
lines(u,v,lty=1)
lines(c(0,1),c(0.05,0.05),col="red")
#lines(c(0,1),c(0.03676,0.03676),col="red")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/credible_intervals/credible_intervals.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/credible_intervals/credible_intervals.cpp")
library(Rcpp)
sourceCpp("credible_intervals.cpp")
n=1000
J=floor(n^(1/3)*log(n))
zeta <- rep(0,J)
lambda_sq <- rep(100,J)
output <- credible(n,J,zeta,lambda_sq)
B <- output$posterior_mean
C <- output$CI_LSE
D <- output$percentages
#B<-read.table("posterior_mean.txt")
#C<-read.table("CI_LSE.txt")
#D<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
y1<-C[,2]
y2<-C[,3]
y3<-C[,4]
f <- function(x) {x^2+x/5}
x0 <-seq(0,1,by=0.01)
y0<-f(x0)
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type ="s",col="blue")
#lines(x2,y1,lwd=2,col="blue",type='s')
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
u<-D[,1]
v<-D[,2]
plot(c(-10000,-10000),xlim=c(0.0,1.0), ylim=c(0.0,0.5), main= "", ylab="",xlab="",bty="n",las=1)
lines(u,v,lty=1)
lines(c(0,1),c(0.05,0.05),col="red")
#lines(c(0,1),c(0.03676,0.03676),col="red")
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type ="s",col="blue")
#lines(x2,y1,lwd=2,col="blue",type='s')
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,z1,lwd=2,type ="s",col="blue")
#lines(x2,y1,lwd=2,col="blue",type='s')
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
install.packages("Rcpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
library(Rcpp)
sourceCpp("smooth_bootstrap.cpp")
n <- 500
bandwidth <- n^(-1/5)
output <- smooth_bootstrap(n,bandwidth)
B <- output$LSE
C <- output$CI_LSE
D <- output$percentages
E <- output$data
B<-read.table("SLSE.txt")
C<-read.table("CI_LSE.txt")
D<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
y1<-C[,2]
y2<-C[,3]
y3<-C[,4]
u1<-E[,1]
v1<-E[,2]
f <- function(x) {x^2+x/5}
x0 <-seq(0,1,by=0.01)
y0<-f(x0)
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type='s')
#points(u1,v1,pch = 1)
lines(x2,y1,lwd=2,lty=1,col="blue")
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
u<-D[,1]
v<-1-D[,2]
plot(c(-10000,-10000),xlim=c(0.0,1.0), ylim=c(0.5,1), main= "", ylab="",xlab="",bty="n",las=1)
lines(u,v,lty=1)
lines(c(0,1),c(0.95,0.95),col="red")
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type='s')
#points(u1,v1,pch = 1)
lines(x2,y1,lwd=2,lty=1,col="blue")
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/classic+smooth_bootstrap/classic+smooth.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/classic+smooth_bootstrap/classic+smooth.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/classic+smooth_bootstrap/classic+smooth.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
library(Rcpp)
sourceCpp("smooth_bootstrap.cpp")
n <- 500
bandwidth <- n^(-1/5)
output <- smooth_bootstrap(n,bandwidth)
B <- output$LSE
C <- output$CI_LSE
D <- output$percentages
E <- output$data
B<-read.table("SLSE.txt")
C<-read.table("CI_LSE.txt")
D<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
y1<-C[,2]
y2<-C[,3]
y3<-C[,4]
u1<-E[,1]
v1<-E[,2]
//f <- function(x) {x^2+x/5}
f <- function(x) {exp(4*(x-0.5))/(1+exp(4* (x-0.5)))}
x0 <-seq(0,1,by=0.01)
y0<-f(x0)
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x 1,z1,lwd=2,type='s')
#points(u1,v1,pch = 1)
lines(x2,y1,lwd=2,lty=1,col="blue")
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
u<-D[,1]
v<-1-D[,2]
plot(c(-10000,-10000),xlim=c(0.0,1.0), ylim=c(0.5,1), main= "", ylab="",xlab="",bty="n",las=1)
lines(u,v,lty=1)
lines(c(0,1),c(0.95,0.95),col="red")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap local_polynomial/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap local_polynomial/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap local_polynomial/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap local_polynomial/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap local_polynomial/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/smooth_bootstrap/smooth_bootstrap.cpp")
install.packages("coarseDataTools")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation2.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation2.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation3.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation3.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/NPMLE_ICM.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/NPMLE_ICM.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/NPMLE_ICM.cpp")
install.packages("lbfgs")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/NPMLE_ICM.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/NPMLE_ICM.cpp")
library(Rcpp)
sourceCpp("Weibull.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_density.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_density.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_density.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_density.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density1.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density1.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density1.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density1.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density1.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density1.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
install.packages("gplots")
library(gplots)
install.packages("ggplot.multistats")
install.packages("ggplot.multistats")
install.packages("mlece")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
//
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/Nadaraya_Watson.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/Nadaraya_Watson.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/Nadaraya_Watson.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/Nadaraya_Watson.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/CI_NW.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/CI_NW.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/CI_NW.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/CI_NW.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/CI_NW.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/CI_NW.cpp")
install.packages("curstatCI")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/CI_SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/CI_SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/CI_SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/CI_SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
########################################################
####   MONOTONE REGRESSION        ######
########################################################
library(Rcpp)
sourceCpp("bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice2.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice2.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
install.packages("isotone")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
library(Rcpp)
A<-read.table("inputdata_Wuhan.txt")
setwd("~/Xcode_projects/incubationtime")
library(Rcpp)
A<-read.table("inputdata_Wuhan.txt")
sourceCpp("bandwidth_df_choice.cpp")
output <- Compute_bandwidth(A)
B <- output$SMLE
C <- output$MSE
x1<-B[,1]
y1<-B[,2]
x2<-C[,1]
y2<-C[,2]
a<-3.035140901
b<-0.002619475
f <- function(x) {1-exp(-b*x^a)/(1-exp(-b*20^a))}
x0 <-seq(0,20,by=0.01)
y0<-f(x0)
output$bandwidth
pdf("SMLE.pdf")
plot(c(-100,-100),xlim=c(0,20), ylim=c(0,max(y0,y1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lwd=2,col="blue")
lines(x0,y0,lwd=2,lty=2,col="red")
dev.off()
pdf("MSE.pdf")
plot(c(-100,-100),xlim=c(min(x2),max(x2)), ylim=c(min(y2),max(y2)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x2,y2,lwd=2,col="blue")
dev.off()
library(curstatCI)
library(Rcpp)
A<-read.table("inputdata_Wuhan.txt")
sourceCpp("bandwidth_df_choice.cpp")
output <- Compute_bandwidth(A)
B <- output$SMLE
C <- output$MSE
x1<-B[,1]
y1<-B[,2]
x2<-C[,1]
y2<-C[,2]
a<-3.035140901
b<-0.002619475
f <- function(x) {1-exp(-b*x^a)/(1-exp(-b*20^a))}
x0 <-seq(0,20,by=0.01)
y0<-f(x0)
output$bandwidth
pdf("SMLE.pdf")
plot(c(-100,-100),xlim=c(0,20), ylim=c(0,max(y0,y1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lwd=2,col="blue")
lines(x0,y0,lwd=2,lty=2,col="red")
dev.off()
pdf("MSE.pdf")
plot(c(-100,-100),xlim=c(min(x2),max(x2)), ylim=c(min(y2),max(y2)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x2,y2,lwd=2,col="blue")
dev.off()
library(Rcpp)
A<-read.table("inputdata_Wuhan.txt")
sourceCpp("bandwidth_df_choice.cpp")
output <- Compute_bandwidth(A)
B <- output$SMLE
C <- output$MSE
x1<-B[,1]
y1<-B[,2]
x2<-C[,1]
y2<-C[,2]
a<-3.035140901
b<-0.002619475
f <- function(x) {1-exp(-b*x^a)/(1-exp(-b*20^a))}
x0 <-seq(0,20,by=0.01)
y0<-f(x0)
output$bandwidth
pdf("SMLE.pdf")
plot(c(-100,-100),xlim=c(0,20), ylim=c(0,max(y0,y1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lwd=2,col="blue")
lines(x0,y0,lwd=2,lty=2,col="red")
dev.off()
pdf("MSE.pdf")
plot(c(-100,-100),xlim=c(min(x2),max(x2)), ylim=c(min(y2),max(y2)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x2,y2,lwd=2,col="blue")
dev.off()
h_min
output
library(Rcpp)
A<-read.table("inputdata_Wuhan.txt")
sourceCpp("bandwidth_df_choice.cpp")
output <- Compute_bandwidth(A)
B <- output$SMLE
C <- output$MSE
x1<-B[,1]
y1<-B[,2]
x2<-C[,1]
y2<-C[,2]
a<-3.035140901
b<-0.002619475
f <- function(x) {1-exp(-b*x^a)/(1-exp(-b*20^a))}
x0 <-seq(0,20,by=0.01)
y0<-f(x0)
output$bandwidth
pdf("SMLE.pdf")
plot(c(-100,-100),xlim=c(0,20), ylim=c(0,max(y0,y1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lwd=2,col="blue")
lines(x0,y0,lwd=2,lty=2,col="red")
dev.off()
pdf("MSE.pdf")
plot(c(-100,-100),xlim=c(min(x2),max(x2)), ylim=c(min(y2),max(y2)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x2,y2,lwd=2,col="blue")
dev.off()
library(Rcpp)
A<-read.table("inputdata_Wuhan.txt")
sourceCpp("bandwidth_df_choice.cpp")
output <- Compute_bandwidth(A)
B <- output$SMLE
C <- output$MSE
x1<-B[,1]
y1<-B[,2]
x2<-C[,1]
y2<-C[,2]
a<-3.035140901
b<-0.002619475
f <- function(x) {1-exp(-b*x^a)/(1-exp(-b*20^a))}
x0 <-seq(0,20,by=0.01)
y0<-f(x0)
output$bandwidth
pdf("SMLE.pdf")
plot(c(-100,-100),xlim=c(0,20), ylim=c(0,max(y0,y1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lwd=2,col="blue")
lines(x0,y0,lwd=2,lty=2,col="red")
dev.off()
pdf("MSE.pdf")
plot(c(-100,-100),xlim=c(min(x2),max(x2)), ylim=c(min(y2),max(y2)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x2,y2,lwd=2,col="blue")
dev.off()
library(Rcpp)
A<-read.table("inputdata_Wuhan.txt")
sourceCpp("bandwidth_df_choice.cpp")
output <- Compute_bandwidth(A)
B <- output$SMLE
C <- output$MSE
x1<-B[,1]
y1<-B[,2]
x2<-C[,1]
y2<-C[,2]
a<-3.035140901
b<-0.002619475
f <- function(x) {1-exp(-b*x^a)/(1-exp(-b*20^a))}
x0 <-seq(0,20,by=0.01)
y0<-f(x0)
output$bandwidth
pdf("SMLE.pdf")
plot(c(-100,-100),xlim=c(0,20), ylim=c(0,max(y0,y1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lwd=2,col="blue")
lines(x0,y0,lwd=2,lty=2,col="red")
dev.off()
pdf("MSE.pdf")
plot(c(-100,-100),xlim=c(min(x2),max(x2)), ylim=c(min(y2),max(y2)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x2,y2,lwd=2,col="blue")
dev.off()
output
