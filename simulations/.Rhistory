Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/nonparMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_df.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_df.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_df.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_density.cpp')
demo()
install.packages("EpiEstim")
demo()
library(EpiEstim)
library(EpiEstim)
library(ggplot2)
## load data
data(Flu2009)
## incidence:
head(Flu2009$incidence)
#>        dates I
#> 1 2009-04-27 1
#> 2 2009-04-28 1
#> 3 2009-04-29 0
#> 4 2009-04-30 2
#> 5 2009-05-01 5
#> 6 2009-05-02 3
## serial interval (SI) distribution:
Flu2009$si_distr
#>  [1] 0.000 0.233 0.359 0.198 0.103 0.053 0.027 0.014 0.007 0.003 0.002 0.001
## interval-ceonsored serial interval data:
## each line represents a transmission event,
## EL/ER show the lower/upper bound of the symptoms onset date in the infector
## SL/SR show the same for the secondary case
## type has entries 0 corresponding to doubly interval-censored data
## (see Reich et al. Statist. Med. 2009).
head(Flu2009$si_data)
#>   EL ER SL SR type
#> 1  0  1  7  8    0
#> 2  0  1  2  3    0
#> 3  0  1  3  4    0
#> 4  0  1  2  5    0
#> 5  0  1  1  9    0
#> 6  0  1  2  4    0
library(incidence)
plot(as.incidence(Flu2009$incidence$I, dates = Flu2009$incidence$dates))
demo()
demo(package="EpiEstimi")
install.packages("EpiEstim")
demo(package="EpiEstimi")
demo(package="EpiEstim")
demo(package="curstatCI")
install.packages("markdown")
install.packages("R0")
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_Sen_Xu.cpp')
source('~/Xcode_projects/interval_censoring/bootstrap/CI_bootstrap_Sen_Xu.R')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_density.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
source('~/Xcode_projects/interval_censoring/bootstrap2/CI_bootstrap_Sen_Xu.R')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_Sen_Xu2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_Sen_Xu2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_Sen_Xu2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_Sen_Xu.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
source('~/Xcode_projects/incubationtime_copy/bootstrap/CI_bootstrap_SMLE2.R')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/bootstrap/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/main_smooth_bootstrap.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/main_smooth_bootstrap.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
B <- output$MLE
library(Rcpp)
sourceCpp("curstat_bootstrapSMLE.cpp")
output <- ComputeIntervals()
B <- output$MLE
C <- output$SMLE
D <- output$CI_SMLE
E <- output$percentages
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
z2<-C[,2]
x3<-D[,1]
t1<-D[,2]
u1<-D[,3]
plot(c(-100,-100),xlim=c(0,2), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,z1,lwd=2,type ="s",col="red")
lines(x2, z2,lwd=2,col="blue")
segments(x3,t1,x3,u1)
x1<-E[,1]
y1<-E[,2]
plot(c(-10000,-10000),xlim=c(0.0,2), ylim=c(0.0,0.2), main= "", ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lty=1)
lines(c(0,2),c(0.05,0.05),col="red")
library(Rcpp)
sourceCpp("curstat_bootstrapSMLE.cpp")
output <- ComputeIntervals()
B <- output$MLE
C <- output$SMLE
D <- output$CI_SMLE
E <- output$percentages
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
z2<-C[,2]
x3<-D[,1]
t1<-D[,2]
u1<-D[,3]
plot(c(-100,-100),xlim=c(0,2), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,z1,lwd=2,type ="s",col="red")
lines(x2, z2,lwd=2,col="blue")
segments(x3,t1,x3,u1)
x1<-E[,1]
y1<-E[,2]
plot(c(-10000,-10000),xlim=c(0.0,2), ylim=c(0.0,0.2), main= "", ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lty=1)
lines(c(0,2),c(0.05,0.05),col="red")
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book_copy/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
Rcpp::sourceCpp('Xcode_projects/interval_censoring/bootstrap2/bootstrap_SMLE2.cpp')
source('~/Xcode_projects/interval_censoring/bootstrap2/MSE_SMLE.R')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
library(Rcpp)
sourceCpp("curstat_bootstrapSMLE.cpp")
output <- ComputeIntervals()
B <- output$MLE
C <- output$SMLE
D <- output$CI_SMLE
E <- output$percentages
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
z2<-C[,2]
x3<-D[,1]
t1<-D[,2]
u1<-D[,3]
plot(c(-100,-100),xlim=c(0,max(x1)), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,z1,lwd=2,type ="s",col="red")
lines(x2, z2,lwd=2,col="blue")
segments(x3,t1,x3,u1)
x1<-E[,1]
y1<-E[,2]
plot(c(-10000,-10000),xlim=c(0.0,2), ylim=c(0.0,0.15), main= "", ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lty=1)
lines(c(0,2),c(0.05,0.05),col="red")
library(Rcpp)
sourceCpp("curstat_bootstrapSMLE.cpp")
output <- ComputeIntervals()
B <- output$MLE
C <- output$SMLE
D <- output$CI_SMLE
E <- output$percentages
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
z2<-C[,2]
x3<-D[,1]
t1<-D[,2]
u1<-D[,3]
plot(c(-100,-100),xlim=c(0,max(x1)), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,z1,lwd=2,type ="s",col="red")
lines(x2, z2,lwd=2,col="blue")
segments(x3,t1,x3,u1)
x1<-E[,1]
y1<-E[,2]
plot(c(-10000,-10000),xlim=c(0.0,2), ylim=c(0.0,0.15), main= "", ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lty=1)
lines(c(0,2),c(0.05,0.05),col="red")
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
library(Rcpp)
library(curstatCI)
# sample size
n <- 1000
# truncated exponential distribution on (0,2)
set.seed(100)
t <- rep(NA, n)
delta <- rep(NA, n)
for(i in (1:n) ){
x<-runif(1)
y<--log(1-(1-exp(-2))*x)
t[i]<-2*runif(1);
if(y<=t[i]){ delta[i]<-1}
else{delta[i]<-0}}
A<-cbind(t[order(t)], delta[order(t)], rep(1,n))
# x vector
grid<-seq(0.1,1.9 ,by = 0.1)
# data-driven bandwidth vector
bw <- ComputeBW(data =A, x = grid)
plot(grid, bw)
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
library(Rcpp)
sourceCpp("curstat_bootstrapSMLE.cpp")
output <- ComputeIntervals()
B1 <- output$MLE
C1 <- output$SMLE
D1 <- output$CI_SMLE
E1 <- output$percentages
B<-read.table("MLE.txt")
C<-read.table("SMLE.txt")
D<-read.table("CI_SMLE.txt")
E<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
z2<-C[,2]
x3<-D[,1]
t1<-D[,2]
u1<-D[,3]
f <- function(x) {1-exp(-x)}/{1-exp(-2)}
x0 <-seq(0,2,by=0.01)
y0<-f(x0)
plot(c(-100,-100),xlim=c(0,2), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type ="s",col="red")
lines(x2, z2,lwd=2,col="blue")
lines(x0, y0,lwd=2,lty=2)
segments(x3,t1,x3,u1)
x1<-E[,1]
y1<-E[,2]
plot(c(-10000,-10000),xlim=c(0,2), ylim=c(0.0,0.5), main= "", ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lty=1)
lines(c(0,2),c(0.05,0.05),col="red")
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
library(Rcpp)
sourceCpp("curstat_bootstrapSMLE.cpp")
output <- ComputeIntervals()
B1 <- output$MLE
C1 <- output$SMLE
D1 <- output$CI_SMLE
E1 <- output$percentages
B<-read.table("MLE.txt")
C<-read.table("SMLE.txt")
D<-read.table("CI_SMLE.txt")
E<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
z2<-C[,2]
x3<-D[,1]
t1<-D[,2]
u1<-D[,3]
f <- function(x) {1-exp(-x)}/{1-exp(-2)}
x0 <-seq(0,2,by=0.01)
y0<-f(x0)
plot(c(-100,-100),xlim=c(0,2), ylim=c(0,max(u1)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type ="s",col="red")
lines(x2, z2,lwd=2,col="blue")
lines(x0, y0,lwd=2,lty=2)
segments(x3,t1,x3,u1)
x1<-E[,1]
y1<-E[,2]
plot(c(-10000,-10000),xlim=c(0,2), ylim=c(0.0,0.5), main= "", ylab="",xlab="",bty="n",las=1)
lines(x1,y1,lty=1)
lines(c(0,2),c(0.05,0.05),col="red")
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Documents/book/Rcpp_scripts/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_classic_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation1.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation1.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation1.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation1.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation1.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/results2/curstat_bootstrapSMLE.cpp')
install.packages("Rcpp")
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_smooth_bootstrap_simulation/results2/curstat_bootstrapSMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/Confidence Intervals (current status simulations)/CI_Sen_Xu_simulation/Sen_Xu_simulation1.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/CI_SMLE/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/CI_SMLE/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/CI_SMLE/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/CI_SMLE/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/CI_SMLE/bootstrap_SMLE.cpp')
Rcpp::sourceCpp('Xcode_projects/incubationtime_copy/CI_SMLE/bootstrap_SMLE.cpp')
source('~/Xcode_projects/incubationtime_copy/CI_SMLE/sim_CI_SMLE.R')
setwd("~/Xcode_projects/incubationtime copy")
source("~/Xcode_projects/incubationtime copy/analysis_ICM.R")
library(Rcpp)
sourceCpp("Weibull.cpp")
sourceCpp("NPMLE_ICM.cpp")
A<-read.table("inputdata_Wuhan.txt")
output1 <- NPMLE(A)
output2 <- Weibull(A)
B1 <- output1$MLE
C1 <- output1$mean
D1 <- output1$SMLE
E1 <- output1$dens
B2 <- output2$df
C2 <- output2$dens
x<-B1[,1]
y<-B1[,2]
x1<-B2[,1]
y1<-B2[,2]
t<-E1[,1]
u<-E1[,2]
t1<-C2[,1]
u1<-C2[,2]
plot(c(-1000,-1000),xlim=c(0,15),ylim=c(0,max(y,y1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x,y,lwd=2,col="red",type='s')
lines(x1,y1,lwd=2,col="blue")
plot(c(-1000,-1000),xlim=c(0,15),ylim=c(0,max(u,u1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(t,u,lwd=2, lty=1,col="blue")
lines(t1,u1,lwd=2, lty=2,col="red")
plot(c(-1000,-1000),xlim=c(0,15),ylim=c(0,max(y,y1)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x,y,lwd=2,col="red",type='s')
lines(x1,y1,lwd=2,col="blue")
setwd("~/Xcode_projects/incubationtime/simulations")
setwd("~/Xcode_projects/incubationtime/simulations")
library(Rcpp)
library(pracma)
library(nloptr)
sourceCpp("nonparMLE.cpp")
source("Weibull_nloptr.R")
source("lognormal_nloptr.R")
NumIt = 1000
n = 500
# data vectors
S <- vector("numeric", n)
E <- vector("numeric", n)
#upper bound for exposure time
M <- 30
#parameters Weibull distribution
a <- 3.035140901
b <- 7.0897556
# input parameters for parametric distributions
x=vector("numeric",2)
alpha=vector("numeric",2)
data <- matrix(0, nrow= n, ncol= 2, byrow = FALSE)
MLEMat <- matrix(0, nrow= NumIt, ncol= 3, byrow = FALSE)
colnames(MLEMat) <- c("MLE","Weibull","log-normal")
for (iter in 1: NumIt)
{
sim = iter
print(iter)
set.seed(sim)
E <- runif(n,1,M)
# generate data
for (i in 1: n)
{
y <- runif(1,0,E[i])
#u <- runif(1,0,1)
#v <- b^(-1/a)*(log(1/(1-c*u)))^(1/a)
v <- rweibull(1,shape=a,scale=b)
S[i] <- y+v
data[i,1] <- max(0,S[i]-E[i])
data[i,2] <- S[i]
}
# Compute NPMLE
output <- NPMLE(n,data,bandwidth=6*n^(-1/5),percentile=0.95)
#mean_NPMLE <- output$quantile
mean_NPMLE <- output$mean
# provide options for parametric methods
opts <- list( "algorithm"= "NLOPT_LN_COBYLA","xtol_rel"= 1.0e-10,
"maxeval"= 10000, "tol_constraints_ineq" = rep(1.0e-10,2))
# x0 is initial value for Weibull fitting
x0 <- c(3,7)
# x1 is initial value for Log-normal fitting
x1 <- c(1,0.5)
# res1 is result for Weibull fitting
res1 <- nloptr(x0 = x0, eval_f = eval_f0,lb = lb0, ub = ub0, eval_g_ineq = eval_g_ineq0, opts = opts,data = data)
# res2 is result for Log-normal fitting
res2 <- nloptr(x0 = x1, eval_f = eval_f1,lb = lb1, ub = ub1, eval_g_ineq = eval_g_ineq1, opts = opts,data = data)
# parameter estimates for Weibull
a1 <- res1$solution[1]
b1 <- res1$solution[2]
# parameter estimates for log-normal
a2 <- res2$solution[1]
b2 <- res2$solution[2]
#	estimates of first moments
mean_Weibull <- b1*gamma(1+1/a1)
mean_lognormal <- exp(a2+0.5*b2^2)
#percentile_Weibull <- b1*(-log(1-p))^(1/a1)
#percentile_lognormal <- exp(a2+sqrt(2*b2^2)*erfinv(2*p-1))
# if one wants to have the results in a file, "decomment" the following lines
#write(mean_NPMLE,file = "mean_MPMLE.txt", ncol =1, append = TRUE)
#write(mean_Weibull,file = "mean_Weibull.txt", ncol =1, append = TRUE)
#write(mean_lognormal,file = "mean_lognormal.txt", ncol =1, append = TRUE)
#make matrix for box plot
MLEMat[iter,] = c(mean_NPMLE, mean_Weibull,mean_lognormal)
}
pdf("BoxPlot_mean.pdf")
boxplot(MLEMat,las=1)
#abline(h=b*(-log(1-p))^(1/a),lwd=2,lty=1,col = "red")
abline(h=b*gamma(1+1/a),lwd=2,lty=1,col = "red")
dev.off()
